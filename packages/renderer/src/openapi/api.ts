// tslint:disable
/**
 * VMCS
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Coin
 */
export interface Coin {
    /**
     * 
     * @type {number}
     * @memberof Coin
     */
    id: number;
    /**
     * 名称，如 $1, 50 cents
     * @type {string}
     * @memberof Coin
     */
    name: string;
    /**
     * 面额，分为单位，$1 填 100
     * @type {number}
     * @memberof Coin
     */
    value: number;
    /**
     * 库存
     * @type {number}
     * @memberof Coin
     */
    quantity: number;
    /**
     * 重量
     * @type {number}
     * @memberof Coin
     */
    weight: number;
}
/**
 * 
 * @export
 * @interface Drink
 */
export interface Drink {
    /**
     * 
     * @type {number}
     * @memberof Drink
     */
    id: number;
    /**
     * 品牌名称
     * @type {string}
     * @memberof Drink
     */
    name: string;
    /**
     * 库存
     * @type {number}
     * @memberof Drink
     */
    quantity: number;
    /**
     * 分为单位
     * @type {number}
     * @memberof Drink
     */
    price: number;
    /**
     * 槽位
     * @type {number}
     * @memberof Drink
     */
    slotNum: number;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    password: string;
}
/**
 * 直接传整个 object
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 门锁状态
     * @type {boolean}
     * @memberof InlineObject1
     */
    doorLocked?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {number}
     * @memberof InlineObject2
     */
    drinkId: number;
    /**
     * 
     * @type {Coin}
     * @memberof InlineObject2
     */
    coins: Coin;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 库存
     * @type {number}
     * @memberof InlineObject3
     */
    stock: number;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    id: number;
    /**
     * 名称，如 $1, 50 cents
     * @type {string}
     * @memberof InlineResponse200
     */
    name: string;
    /**
     * 面额，分为单位，$1 填 100
     * @type {number}
     * @memberof InlineResponse200
     */
    value: number;
    /**
     * 库存
     * @type {number}
     * @memberof InlineResponse200
     */
    quantity: number;
    /**
     * 重量
     * @type {number}
     * @memberof InlineResponse200
     */
    weight: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    isValid: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    collectCoins: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    noChangeAvailable: boolean;
}
/**
 * 
 * @export
 * @interface Machine
 */
export interface Machine {
    /**
     * 
     * @type {number}
     * @memberof Machine
     */
    id: number;
    /**
     * Soft Drink Dispenser
     * @type {string}
     * @memberof Machine
     */
    name: string;
    /**
     * 门锁状态
     * @type {boolean}
     * @memberof Machine
     */
    doorLocked: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * Maintainer
     * @type {string}
     * @memberof User
     */
    role: string;
    /**
     * 固定 6 位
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * [\'login\', \'logout\']
     * @type {string}
     * @memberof User
     */
    status: string;
}

/**
 * CoinApi - axios parameter creator
 * @export
 */
export const CoinApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Check Coin
         * @param {Coin} [coin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsCheckCoinPost: async (coin?: Coin, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/coins/checkCoin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof coin !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(coin !== undefined ? coin : {}) : (coin || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Delete Coin(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsDelete: async (requestBody?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/coins/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch Coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/coins`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add Coin(s)
         * @param {Array<Coin>} [coin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsPost: async (coin?: Array<Coin>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/coins/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof coin !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(coin !== undefined ? coin : {}) : (coin || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Modify Coin(s)
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsPut: async (inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/coins/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject3 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoinApi - functional programming interface
 * @export
 */
export const CoinApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Check Coin
         * @param {Coin} [coin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coinsCheckCoinPost(coin?: Coin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await CoinApiAxiosParamCreator(configuration).coinsCheckCoinPost(coin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Delete Coin(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coinsDelete(requestBody?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await CoinApiAxiosParamCreator(configuration).coinsDelete(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Fetch Coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coinsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Coin>>> {
            const localVarAxiosArgs = await CoinApiAxiosParamCreator(configuration).coinsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add Coin(s)
         * @param {Array<Coin>} [coin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coinsPost(coin?: Array<Coin>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CoinApiAxiosParamCreator(configuration).coinsPost(coin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Modify Coin(s)
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coinsPut(inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Drink>>> {
            const localVarAxiosArgs = await CoinApiAxiosParamCreator(configuration).coinsPut(inlineObject3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CoinApi - factory interface
 * @export
 */
export const CoinApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Check Coin
         * @param {Coin} [coin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsCheckCoinPost(coin?: Coin, options?: any): AxiosPromise<InlineResponse200> {
            return CoinApiFp(configuration).coinsCheckCoinPost(coin, options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Delete Coin(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsDelete(requestBody?: Array<number>, options?: any): AxiosPromise<Array<number>> {
            return CoinApiFp(configuration).coinsDelete(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch Coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsGet(options?: any): AxiosPromise<Array<Coin>> {
            return CoinApiFp(configuration).coinsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add Coin(s)
         * @param {Array<Coin>} [coin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsPost(coin?: Array<Coin>, options?: any): AxiosPromise<object> {
            return CoinApiFp(configuration).coinsPost(coin, options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Modify Coin(s)
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coinsPut(inlineObject3?: InlineObject3, options?: any): AxiosPromise<Array<Drink>> {
            return CoinApiFp(configuration).coinsPut(inlineObject3, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoinApi - object-oriented interface
 * @export
 * @class CoinApi
 * @extends {BaseAPI}
 */
export class CoinApi extends BaseAPI {
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Check Coin
     * @param {Coin} [coin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinApi
     */
    public coinsCheckCoinPost(coin?: Coin, options?: any) {
        return CoinApiFp(this.configuration).coinsCheckCoinPost(coin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Delete Coin(s)
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinApi
     */
    public coinsDelete(requestBody?: Array<number>, options?: any) {
        return CoinApiFp(this.configuration).coinsDelete(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch Coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinApi
     */
    public coinsGet(options?: any) {
        return CoinApiFp(this.configuration).coinsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Add Coin(s)
     * @param {Array<Coin>} [coin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinApi
     */
    public coinsPost(coin?: Array<Coin>, options?: any) {
        return CoinApiFp(this.configuration).coinsPost(coin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Modify Coin(s)
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinApi
     */
    public coinsPut(inlineObject3?: InlineObject3, options?: any) {
        return CoinApiFp(this.configuration).coinsPut(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * DrinkApi - axios parameter creator
 * @export
 */
export const DrinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Delete Drink(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksDelete: async (requestBody?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/drinks/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch Drinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/drinks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Add Drink(s)
         * @param {Array<Drink>} [drink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksPost: async (drink?: Array<Drink>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/drinks/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof drink !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(drink !== undefined ? drink : {}) : (drink || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksPurchasePost: async (inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/drinks/purchase`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Modify Drink(s)
         * @param {Array<Drink>} [drink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksPut: async (drink?: Array<Drink>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/drinks/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof drink !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(drink !== undefined ? drink : {}) : (drink || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrinkApi - functional programming interface
 * @export
 */
export const DrinkApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Delete Drink(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drinksDelete(requestBody?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DrinkApiAxiosParamCreator(configuration).drinksDelete(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Fetch Drinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drinksGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Drink>>> {
            const localVarAxiosArgs = await DrinkApiAxiosParamCreator(configuration).drinksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Add Drink(s)
         * @param {Array<Drink>} [drink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drinksPost(drink?: Array<Drink>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DrinkApiAxiosParamCreator(configuration).drinksPost(drink, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Purchase
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drinksPurchasePost(inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await DrinkApiAxiosParamCreator(configuration).drinksPurchasePost(inlineObject2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Modify Drink(s)
         * @param {Array<Drink>} [drink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drinksPut(drink?: Array<Drink>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DrinkApiAxiosParamCreator(configuration).drinksPut(drink, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DrinkApi - factory interface
 * @export
 */
export const DrinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Delete Drink(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksDelete(requestBody?: Array<number>, options?: any): AxiosPromise<object> {
            return DrinkApiFp(configuration).drinksDelete(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch Drinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksGet(options?: any): AxiosPromise<Array<Drink>> {
            return DrinkApiFp(configuration).drinksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Add Drink(s)
         * @param {Array<Drink>} [drink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksPost(drink?: Array<Drink>, options?: any): AxiosPromise<object> {
            return DrinkApiFp(configuration).drinksPost(drink, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksPurchasePost(inlineObject2?: InlineObject2, options?: any): AxiosPromise<InlineResponse2001> {
            return DrinkApiFp(configuration).drinksPurchasePost(inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
         * @summary Modify Drink(s)
         * @param {Array<Drink>} [drink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drinksPut(drink?: Array<Drink>, options?: any): AxiosPromise<object> {
            return DrinkApiFp(configuration).drinksPut(drink, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrinkApi - object-oriented interface
 * @export
 * @class DrinkApi
 * @extends {BaseAPI}
 */
export class DrinkApi extends BaseAPI {
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Delete Drink(s)
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinkApi
     */
    public drinksDelete(requestBody?: Array<number>, options?: any) {
        return DrinkApiFp(this.configuration).drinksDelete(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch Drinks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinkApi
     */
    public drinksGet(options?: any) {
        return DrinkApiFp(this.configuration).drinksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Add Drink(s)
     * @param {Array<Drink>} [drink] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinkApi
     */
    public drinksPost(drink?: Array<Drink>, options?: any) {
        return DrinkApiFp(this.configuration).drinksPost(drink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinkApi
     */
    public drinksPurchasePost(inlineObject2?: InlineObject2, options?: any) {
        return DrinkApiFp(this.configuration).drinksPurchasePost(inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Modify Drink(s)
     * @param {Array<Drink>} [drink] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinkApi
     */
    public drinksPut(drink?: Array<Drink>, options?: any) {
        return DrinkApiFp(this.configuration).drinksPut(drink, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * MachineApi - axios parameter creator
 * @export
 */
export const MachineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch Machine
         * @param {Machine} [machine] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machineGet: async (machine?: Machine, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/machine/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof machine !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(machine !== undefined ? machine : {}) : (machine || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Machine(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machinesDelete: async (requestBody?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/machines/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add Machine(s)
         * @param {Array<Machine>} [machine] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machinesPost: async (machine?: Array<Machine>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/machines/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof machine !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(machine !== undefined ? machine : {}) : (machine || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
         * @summary Modify Machine
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machinesPut: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/machines/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MachineApi - functional programming interface
 * @export
 */
export const MachineApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch Machine
         * @param {Machine} [machine] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async machineGet(machine?: Machine, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Machine>> {
            const localVarAxiosArgs = await MachineApiAxiosParamCreator(configuration).machineGet(machine, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Machine(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async machinesDelete(requestBody?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await MachineApiAxiosParamCreator(configuration).machinesDelete(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add Machine(s)
         * @param {Array<Machine>} [machine] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async machinesPost(machine?: Array<Machine>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await MachineApiAxiosParamCreator(configuration).machinesPost(machine, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
         * @summary Modify Machine
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async machinesPut(inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await MachineApiAxiosParamCreator(configuration).machinesPut(inlineObject1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MachineApi - factory interface
 * @export
 */
export const MachineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Fetch Machine
         * @param {Machine} [machine] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machineGet(machine?: Machine, options?: any): AxiosPromise<Machine> {
            return MachineApiFp(configuration).machineGet(machine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Machine(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machinesDelete(requestBody?: Array<number>, options?: any): AxiosPromise<object> {
            return MachineApiFp(configuration).machinesDelete(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add Machine(s)
         * @param {Array<Machine>} [machine] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machinesPost(machine?: Array<Machine>, options?: any): AxiosPromise<object> {
            return MachineApiFp(configuration).machinesPost(machine, options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
         * @summary Modify Machine
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machinesPut(inlineObject1?: InlineObject1, options?: any): AxiosPromise<object> {
            return MachineApiFp(configuration).machinesPut(inlineObject1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MachineApi - object-oriented interface
 * @export
 * @class MachineApi
 * @extends {BaseAPI}
 */
export class MachineApi extends BaseAPI {
    /**
     * 
     * @summary Fetch Machine
     * @param {Machine} [machine] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineApi
     */
    public machineGet(machine?: Machine, options?: any) {
        return MachineApiFp(this.configuration).machineGet(machine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Machine(s)
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineApi
     */
    public machinesDelete(requestBody?: Array<number>, options?: any) {
        return MachineApiFp(this.configuration).machinesDelete(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Add Machine(s)
     * @param {Array<Machine>} [machine] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineApi
     */
    public machinesPost(machine?: Array<Machine>, options?: any) {
        return MachineApiFp(this.configuration).machinesPost(machine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Modify Machine
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineApi
     */
    public machinesPut(inlineObject1?: InlineObject1, options?: any) {
        return MachineApiFp(this.configuration).machinesPut(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
         * @summary Login
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
         * @summary Logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDelete: async (requestBody?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add User(s)
         * @param {Array<User>} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (user?: Array<User>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
         * @summary Login
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).authLoginPost(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
         * @summary Logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).authLogoutPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete User(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDelete(requestBody?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).usersDelete(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Fetch Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).usersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add User(s)
         * @param {Array<User>} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(user?: Array<User>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).usersPost(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
         * @summary Login
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(inlineObject?: InlineObject, options?: any): AxiosPromise<object> {
            return UserApiFp(configuration).authLoginPost(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
         * @summary Logout
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(body?: object, options?: any): AxiosPromise<object> {
            return UserApiFp(configuration).authLogoutPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User(s)
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDelete(requestBody?: Array<number>, options?: any): AxiosPromise<Array<number>> {
            return UserApiFp(configuration).usersDelete(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): AxiosPromise<Array<User>> {
            return UserApiFp(configuration).usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
         * @summary Add User(s)
         * @param {Array<User>} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(user?: Array<User>, options?: any): AxiosPromise<object> {
            return UserApiFp(configuration).usersPost(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Login
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public authLoginPost(inlineObject?: InlineObject, options?: any) {
        return UserApiFp(this.configuration).authLoginPost(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
     * @summary Logout
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public authLogoutPost(body?: object, options?: any) {
        return UserApiFp(this.configuration).authLogoutPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User(s)
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersDelete(requestBody?: Array<number>, options?: any) {
        return UserApiFp(this.configuration).usersDelete(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersGet(options?: any) {
        return UserApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Add User(s)
     * @param {Array<User>} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersPost(user?: Array<User>, options?: any) {
        return UserApiFp(this.configuration).usersPost(user, options).then((request) => request(this.axios, this.basePath));
    }

}



// tslint:disable
/**
 * VMCS
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Coin
 */
export interface Coin {
  /**
   *
   * @type {number}
   * @memberof Coin
   */
  id: number;
  /**
   * 名称，如 $1, 50 cents
   * @type {string}
   * @memberof Coin
   */
  name: string;
  /**
   * 面额，分为单位，$1 填 100
   * @type {number}
   * @memberof Coin
   */
  value: number;
  /**
   * 库存
   * @type {number}
   * @memberof Coin
   */
  quantity: number;
  /**
   * 重量
   * @type {number}
   * @memberof Coin
   */
  weight: number;
}
/**
 *
 * @export
 * @interface Drink
 */
export interface Drink {
  /**
   *
   * @type {number}
   * @memberof Drink
   */
  id: number;
  /**
   * 品牌名称
   * @type {string}
   * @memberof Drink
   */
  name: string;
  /**
   * 库存
   * @type {number}
   * @memberof Drink
   */
  quantity: number;
  /**
   * 分为单位
   * @type {number}
   * @memberof Drink
   */
  price: number;
  /**
   * 槽位
   * @type {number}
   * @memberof Drink
   */
  slotNum: number;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
  /**
   * 库存
   * @type {number}
   * @memberof InlineObject
   */
  stock: number;
}
/**
 * 直接传整个 object
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
  /**
   * 门锁状态
   * @type {boolean}
   * @memberof InlineObject1
   */
  doorLocked?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
  /**
   *
   * @type {string}
   * @memberof InlineObject2
   */
  password: string;
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
  /**
   *
   * @type {number}
   * @memberof InlineObject3
   */
  drinkId: number;
  /**
   *
   * @type {Coin}
   * @memberof InlineObject3
   */
  coins: Coin;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {number}
   * @memberof InlineResponse200
   */
  id: number;
  /**
   * 名称，如 $1, 50 cents
   * @type {string}
   * @memberof InlineResponse200
   */
  name: string;
  /**
   * 面额，分为单位，$1 填 100
   * @type {number}
   * @memberof InlineResponse200
   */
  value: number;
  /**
   * 库存
   * @type {number}
   * @memberof InlineResponse200
   */
  quantity: number;
  /**
   * 重量
   * @type {number}
   * @memberof InlineResponse200
   */
  weight: number;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse200
   */
  isValid: boolean;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
  /**
   *
   * @type {number}
   * @memberof InlineResponse2001
   */
  collectCoins: number;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2001
   */
  noChangeAvailable: boolean;
}
/**
 *
 * @export
 * @interface Machine
 */
export interface Machine {
  /**
   *
   * @type {number}
   * @memberof Machine
   */
  id: number;
  /**
   * Soft Drink Dispenser
   * @type {string}
   * @memberof Machine
   */
  name: string;
  /**
   * 门锁状态
   * @type {boolean}
   * @memberof Machine
   */
  doorLocked: boolean;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number;
  /**
   * Maintainer
   * @type {string}
   * @memberof User
   */
  role: string;
  /**
   * 固定 6 位
   * @type {string}
   * @memberof User
   */
  password: string;
  /**
   * [\'login\', \'logout\']
   * @type {string}
   * @memberof User
   */
  status: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Login
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost: async (inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/login`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject2 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {})
        : inlineObject2 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
     * @summary Logout
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutPost: async (body?: object, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/logout`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Check Coin
     * @param {Coin} [coin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsCheckCoinPost: async (coin?: Coin, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/coins/checkCoin`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof coin !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(coin !== undefined ? coin : {}) : coin || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Delete Coin(s)
     * @param {Array<number>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsDelete: async (requestBody?: Array<number>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/coins/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof requestBody !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(requestBody !== undefined ? requestBody : {})
        : requestBody || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch Coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/coins`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Add Coin(s)
     * @param {Array<Coin>} [coin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsPost: async (coin?: Array<Coin>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/coins/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof coin !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(coin !== undefined ? coin : {}) : coin || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Modify Coin(s)
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsPut: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/coins/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject !== undefined ? inlineObject : {})
        : inlineObject || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Delete Drink(s)
     * @param {Array<number>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksDelete: async (requestBody?: Array<number>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/drinks/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof requestBody !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(requestBody !== undefined ? requestBody : {})
        : requestBody || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch Drinks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/drinks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Add Drink(s)
     * @param {Array<Drink>} [drink]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksPost: async (drink?: Array<Drink>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/drinks/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof drink !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(drink !== undefined ? drink : {}) : drink || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Purchase
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksPurchasePost: async (inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/drinks/purchase`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject3 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {})
        : inlineObject3 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Modify Drink(s)
     * @param {Array<Drink>} [drink]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksPut: async (drink?: Array<Drink>, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/drinks/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof drink !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(drink !== undefined ? drink : {}) : drink || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch Machine
     * @param {Machine} [machine]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    machineGet: async (machine?: Machine, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/machine/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof machine !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(machine !== undefined ? machine : {})
        : machine || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Modify Machine
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    machinePut: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/machine/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject1 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {})
        : inlineObject1 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Login
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLoginPost(
      inlineObject2?: InlineObject2,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).authLoginPost(inlineObject2, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
     * @summary Logout
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLogoutPost(
      body?: object,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).authLogoutPost(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Check Coin
     * @param {Coin} [coin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coinsCheckCoinPost(
      coin?: Coin,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).coinsCheckCoinPost(coin, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Delete Coin(s)
     * @param {Array<number>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coinsDelete(
      requestBody?: Array<number>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).coinsDelete(requestBody, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Fetch Coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coinsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Coin>>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).coinsGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Add Coin(s)
     * @param {Array<Coin>} [coin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coinsPost(
      coin?: Array<Coin>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).coinsPost(coin, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Modify Coin(s)
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coinsPut(
      inlineObject?: InlineObject,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Drink>>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).coinsPut(inlineObject, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Delete Drink(s)
     * @param {Array<number>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drinksDelete(
      requestBody?: Array<number>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).drinksDelete(requestBody, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Fetch Drinks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drinksGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Drink>>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).drinksGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Add Drink(s)
     * @param {Array<Drink>} [drink]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drinksPost(
      drink?: Array<Drink>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).drinksPost(drink, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Purchase
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drinksPurchasePost(
      inlineObject3?: InlineObject3,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).drinksPurchasePost(
        inlineObject3,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Modify Drink(s)
     * @param {Array<Drink>} [drink]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drinksPut(
      drink?: Array<Drink>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).drinksPut(drink, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Fetch Machine
     * @param {Machine} [machine]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async machineGet(
      machine?: Machine,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Machine>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).machineGet(machine, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Modify Machine
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async machinePut(
      inlineObject1?: InlineObject1,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).machinePut(inlineObject1, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Login
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost(inlineObject2?: InlineObject2, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .authLoginPost(inlineObject2, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
     * @summary Logout
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLogoutPost(body?: object, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .authLogoutPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Check Coin
     * @param {Coin} [coin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsCheckCoinPost(coin?: Coin, options?: any): AxiosPromise<InlineResponse200> {
      return DefaultApiFp(configuration)
        .coinsCheckCoinPost(coin, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Delete Coin(s)
     * @param {Array<number>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsDelete(requestBody?: Array<number>, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .coinsDelete(requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch Coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsGet(options?: any): AxiosPromise<Array<Coin>> {
      return DefaultApiFp(configuration)
        .coinsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Add Coin(s)
     * @param {Array<Coin>} [coin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsPost(coin?: Array<Coin>, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .coinsPost(coin, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
     * @summary Modify Coin(s)
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinsPut(inlineObject?: InlineObject, options?: any): AxiosPromise<Array<Drink>> {
      return DefaultApiFp(configuration)
        .coinsPut(inlineObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Delete Drink(s)
     * @param {Array<number>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksDelete(requestBody?: Array<number>, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .drinksDelete(requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch Drinks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksGet(options?: any): AxiosPromise<Array<Drink>> {
      return DefaultApiFp(configuration)
        .drinksGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Add Drink(s)
     * @param {Array<Drink>} [drink]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksPost(drink?: Array<Drink>, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .drinksPost(drink, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Purchase
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksPurchasePost(inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse2001> {
      return DefaultApiFp(configuration)
        .drinksPurchasePost(inlineObject3, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
     * @summary Modify Drink(s)
     * @param {Array<Drink>} [drink]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drinksPut(drink?: Array<Drink>, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .drinksPut(drink, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch Machine
     * @param {Machine} [machine]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    machineGet(machine?: Machine, options?: any): AxiosPromise<Machine> {
      return DefaultApiFp(configuration)
        .machineGet(machine, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
     * @summary Modify Machine
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    machinePut(inlineObject1?: InlineObject1, options?: any): AxiosPromise<object> {
      return DefaultApiFp(configuration)
        .machinePut(inlineObject1, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
  /**
   * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
   * @summary Login
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  authLoginPost(inlineObject2?: InlineObject2, options?: any): AxiosPromise<object>;

  /**
   * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
   * @summary Logout
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  authLogoutPost(body?: object, options?: any): AxiosPromise<object>;

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Check Coin
   * @param {Coin} [coin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  coinsCheckCoinPost(coin?: Coin, options?: any): AxiosPromise<InlineResponse200>;

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Delete Coin(s)
   * @param {Array<number>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  coinsDelete(requestBody?: Array<number>, options?: any): AxiosPromise<object>;

  /**
   *
   * @summary Fetch Coins
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  coinsGet(options?: any): AxiosPromise<Array<Coin>>;

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Add Coin(s)
   * @param {Array<Coin>} [coin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  coinsPost(coin?: Array<Coin>, options?: any): AxiosPromise<object>;

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Modify Coin(s)
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  coinsPut(inlineObject?: InlineObject, options?: any): AxiosPromise<Array<Drink>>;

  /**
   * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
   * @summary Delete Drink(s)
   * @param {Array<number>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  drinksDelete(requestBody?: Array<number>, options?: any): AxiosPromise<object>;

  /**
   *
   * @summary Fetch Drinks
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  drinksGet(options?: any): AxiosPromise<Array<Drink>>;

  /**
   * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
   * @summary Add Drink(s)
   * @param {Array<Drink>} [drink]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  drinksPost(drink?: Array<Drink>, options?: any): AxiosPromise<object>;

  /**
   *
   * @summary Purchase
   * @param {InlineObject3} [inlineObject3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  drinksPurchasePost(inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse2001>;

  /**
   * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
   * @summary Modify Drink(s)
   * @param {Array<Drink>} [drink]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  drinksPut(drink?: Array<Drink>, options?: any): AxiosPromise<object>;

  /**
   *
   * @summary Fetch Machine
   * @param {Machine} [machine]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  machineGet(machine?: Machine, options?: any): AxiosPromise<Machine>;

  /**
   * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
   * @summary Modify Machine
   * @param {InlineObject1} [inlineObject1]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  machinePut(inlineObject1?: InlineObject1, options?: any): AxiosPromise<object>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
  /**
   * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
   * @summary Login
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authLoginPost(inlineObject2?: InlineObject2, options?: any) {
    return DefaultApiFp(this.configuration)
      .authLoginPost(inlineObject2, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * The user (ie: the maintainer) shall terminate use of the maintenance panel (ie: log-out) by pressing a button with the caption “Press Here when Finished”. If the state of the vending machine door is locked, then the log-out request shall be successful and the maintenance panel shall become inactive (ie: the functions can not be used) except for the “Password” text field. However, if the state of the vending machine door is unlocked, then the log-out request shall be ignored.
   * @summary Logout
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authLogoutPost(body?: object, options?: any) {
    return DefaultApiFp(this.configuration)
      .authLogoutPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Check Coin
   * @param {Coin} [coin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public coinsCheckCoinPost(coin?: Coin, options?: any) {
    return DefaultApiFp(this.configuration)
      .coinsCheckCoinPost(coin, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Delete Coin(s)
   * @param {Array<number>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public coinsDelete(requestBody?: Array<number>, options?: any) {
    return DefaultApiFp(this.configuration)
      .coinsDelete(requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch Coins
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public coinsGet(options?: any) {
    return DefaultApiFp(this.configuration)
      .coinsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Add Coin(s)
   * @param {Array<Coin>} [coin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public coinsPost(coin?: Array<Coin>, options?: any) {
    return DefaultApiFp(this.configuration)
      .coinsPost(coin, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (1) The number of coins held of a denomination shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 40).
   * @summary Modify Coin(s)
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public coinsPut(inlineObject?: InlineObject, options?: any) {
    return DefaultApiFp(this.configuration)
      .coinsPut(inlineObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
   * @summary Delete Drink(s)
   * @param {Array<number>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public drinksDelete(requestBody?: Array<number>, options?: any) {
    return DefaultApiFp(this.configuration)
      .drinksDelete(requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch Drinks
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public drinksGet(options?: any) {
    return DefaultApiFp(this.configuration)
      .drinksGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
   * @summary Add Drink(s)
   * @param {Array<Drink>} [drink]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public drinksPost(drink?: Array<Drink>, options?: any) {
    return DefaultApiFp(this.configuration)
      .drinksPost(drink, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Purchase
   * @param {InlineObject3} [inlineObject3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public drinksPurchasePost(inlineObject3?: InlineObject3, options?: any) {
    return DefaultApiFp(this.configuration)
      .drinksPurchasePost(inlineObject3, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (2) The number of cans held of a brand shall be able to be changed by entering a new value into the text field to overwrite the current value (note that the value must be an integer, ≥ 0 & ≤ 20).
   * @summary Modify Drink(s)
   * @param {Array<Drink>} [drink]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public drinksPut(drink?: Array<Drink>, options?: any) {
    return DefaultApiFp(this.configuration)
      .drinksPut(drink, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch Machine
   * @param {Machine} [machine]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public machineGet(machine?: Machine, options?: any) {
    return DefaultApiFp(this.configuration)
      .machineGet(machine, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 3.2.4 (3) When the maintainer successfully logs-in this checkbox shall be automatically unchecked by the system to indicate that the door status is unlocked. The door status shall be able to be changed to locked by checking the checkbox.
   * @summary Modify Machine
   * @param {InlineObject1} [inlineObject1]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public machinePut(inlineObject1?: InlineObject1, options?: any) {
    return DefaultApiFp(this.configuration)
      .machinePut(inlineObject1, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
